import openai
import requests
from flask import Flask, render_template, request, send_file
from pptx import Presentation
import io
from bs4 import BeautifulSoup
from pptx.util import Inches
from pptx.dml.color import RGBColor

app = Flask(__name__)

# Function to fetch data from multiple sources
def fetch_combined_content(topic):
    sources = {
        "Wikipedia": f"https://en.wikipedia.org/wiki/{topic.replace(' ', '_')}",
        "Britannica": f"https://www.britannica.com/search?query={topic.replace(' ', '+')}",
        "Stack Exchange": f"https://stackoverflow.com/search?q={topic.replace(' ', '+')}"
    }
    
    combined_content = ""

    for source, url in sources.items():
        try:
            response = requests.get(url)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')

                # Extract content based on source structure
                if source == "Wikipedia":
                    paragraphs = soup.find_all('p')[:10]
                elif source == "Britannica":
                    paragraphs = soup.find_all('div', class_="md-text")[:10]
                else:
                    paragraphs = soup.find_all('div', class_="js-post-body")[:10]

                for paragraph in paragraphs:
                    combined_content += paragraph.get_text() + "\n\n"
            else:
                combined_content += f"Error fetching data from {source}\n\n"
        except Exception as e:
            combined_content += f"Error fetching data from {source}: {str(e)}\n\n"

    return combined_content.strip()

# Function to refine and expand the content using OpenAI's GPT model
def refine_content(content, topic):
    try:
        openai.api_key = "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"  # Replace with your OpenAI API key

        # Provide instructions for refining
        instructions = f"Refine and expand the following content to be more structured, clear, and informative. Break it into logical subtopics. If the topic is a famous person, divide the content into sections like Early Life, Career, Achievements, etc.:\n\n{content}"

        response = openai.ChatCompletion.create(
            model="gpt-4o",  # Use GPT-4 or the appropriate model
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": instructions}
            ],
            max_tokens=1500,
            temperature=0.7
        )

        refined_content = response['choices'][0]['message']['content'].strip()
        return refined_content
    except Exception as e:
        return f"Error in refining text: {str(e)}"

# Function to create the PowerPoint presentation from the refined content
def create_ppt(content, topic):
    prs = Presentation()

    # Add a title slide
    slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = topic
    subtitle.text = "Generated by Ankit.AI"

    # Split content into sections
    slides_content = content.split('\n\n')
    
    subtopics = []
    for section in slides_content:
        section = section.strip()
        if section:
            subtopics.append(section)

    for subtopic in subtopics:
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        body = slide.shapes.placeholders[1]

        # Split subtopic into title and content
        lines = subtopic.split('\n')
        slide_title = lines[0] if len(lines) > 0 else "Details"
        body_text = '\n'.join(lines[1:])

        title.text = slide_title[:50]
        body.text = body_text.strip()

        # Adjust text size
        for paragraph in body.text_frame.paragraphs:
            for run in paragraph.runs:
                run.font.size = Inches(0.35)  # Approx 24-point font

        add_watermark(slide)

    # Save the PowerPoint to a byte stream and return it
    ppt_stream = io.BytesIO()
    prs.save(ppt_stream)
    ppt_stream.seek(0)
    return ppt_stream

# Function to add a watermark
def add_watermark(slide):
    left = Inches(8)
    top = Inches(5.5)
    width = Inches(2)
    height = Inches(0.5)

    textbox = slide.shapes.add_textbox(left=left, top=top, width=width, height=height)
    text_frame = textbox.text_frame
    text_frame.text = "Generated by Ankit AI"

    for paragraph in text_frame.paragraphs:
        for run in paragraph.runs:
            run.font.size = Inches(0.2)
            run.font.color.rgb = RGBColor(192, 192, 192)  # Light gray
            run.font.italic = True

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        topic = request.form["topic"]

        # Fetch and refine content
        content = fetch_combined_content(topic)
        if content.startswith("Error"):
            return content

        refined_content = refine_content(content, topic)
        if refined_content.startswith("Error"):
            return refined_content

        # Create PowerPoint
        ppt_stream = create_ppt(refined_content, topic)

        return send_file(
            ppt_stream,
            as_attachment=True,
            download_name=f"{topic}_presentation.pptx",
            mimetype="application/vnd.openxmlformats-officedocument.presentationml.presentation"
        )

    return render_template("index.html")

if __name__ == "__main__":
    app.run(debug=True)
